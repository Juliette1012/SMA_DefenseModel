//--------------------------------------------------------------------------//
// class XGuiImage                                                          //
//--------------------------------------------------------------------------//

//-------- Allocators ------------------------------------------------------//

//-------- Inspectors ------------------------------------------------------//
inline void XGuiImage::getLocalBoundingBox(double & xmin,double & ymin,
                                           double & xmax,double & ymax)
                                           const // virtual
{
xmin=-_l_2;
xmax=_l_2;
ymin=-_w_2;
ymax=_w_2;
}

inline void XGuiImage::getBoundingBox(double & xmin,double & ymin,
                                      double & xmax,double & ymax,
                                      const XGuiViewer2D *) const
{                                                                  // virtual
xmin=xmax=_coordX[0];
ymin=ymax=_coordY[0];
if(_coordX[1]<xmin) xmin=_coordX[1];
else if(_coordX[1]>xmax) xmax=_coordX[1];
if(_coordY[1]<ymin) ymin=_coordY[1];
else if(_coordY[1]>ymax) ymax=_coordY[1];
if(_coordX[2]<xmin) xmin=_coordX[2];
else if(_coordX[2]>xmax) xmax=_coordX[2];
if(_coordY[2]<ymin) ymin=_coordY[2];
else if(_coordY[2]>ymax) ymax=_coordY[2];
if(_coordX[3]<xmin) xmin=_coordX[3];
else if(_coordX[3]>xmax) xmax=_coordX[3];
if(_coordY[3]<ymin) ymin=_coordY[3];
else if(_coordY[3]>ymax) ymax=_coordY[3];
}

inline double XGuiImage::distanceTo(double x,double y,
                                    const XGuiViewer2D *) const // virtual
{
double d2,minD2;
minD2=XGuiShape2D::_distanceToSegment(x,y,_coordX[0],_coordY[0],
                                          _coordX[1],_coordY[1]);
d2=XGuiShape2D::_distanceToSegment(x,y,_coordX[1],_coordY[1],
                                       _coordX[2],_coordY[2]);
if(d2<minD2) minD2=d2;
d2=XGuiShape2D::_distanceToSegment(x,y,_coordX[2],_coordY[2],
                                       _coordX[3],_coordY[3]);
if(d2<minD2) minD2=d2;
d2=XGuiShape2D::_distanceToSegment(x,y,_coordX[3],_coordY[3],
                                       _coordX[0],_coordY[0]);
if(d2<minD2) minD2=d2;
return(minD2);
}

inline int XGuiImage::getNbColors(void) const
{
return(_nbColors);
}

inline unsigned long XGuiImage::getPixel(int x,int y) const
{
return(_pixels[x+_nbColumns*(_nbLines-y-1)]);
}

inline int XGuiImage::getNbColumns(void) const
{
return(_nbColumns);
}

inline int XGuiImage::getNbLines(void) const
{
return(_nbLines);
}

inline const Strings & XGuiImage::getFileName(void) const
{
return(_fileName);
}

inline double XGuiImage::getScale(void) const
{
return(_scale);
}

inline bool XGuiImage::fail(void) const
{
return(_fail);
}

inline void XGuiImage::getRGB(unsigned long pixel,unsigned char & r,
                              unsigned char & g,unsigned char & b) const
{
r=_red[pixel];
g=_green[pixel];
b=_blue[pixel];
}

//-------- Input/Output ----------------------------------------------------//

//-------- Modifiers -------------------------------------------------------//
inline void XGuiImage::computePosition(void) // virtual
{
double cosTh=::cos(_theta0);
double sinTh=::sin(_theta0);
_dx=_scale*cosTh;
_dy=_scale*sinTh;
_coordX[1]=_x0-_l_2*cosTh-_w_2*sinTh;
_coordY[1]=_y0+_w_2*cosTh-_l_2*sinTh;
_coordX[0]=_coordX[1]+_nbColumns*_dx;
_coordY[0]=_coordY[1]+_nbColumns*_dy;
_coordX[3]=_coordX[1]+_nbColumns*_dx+_nbLines*_dy;
_coordY[3]=_coordY[1]+_nbColumns*_dy-_nbLines*_dx;
_coordX[2]=_coordX[1]+_nbLines*_dy;
_coordY[2]=_coordY[1]-_nbLines*_dx;
XGuiShape2D::computePosition();
}

inline void XGuiImage::savePosition(void) // virtual
{
_oldCoordX[0]=_coordX[0];
_oldCoordY[0]=_coordY[0];
_oldCoordX[1]=_coordX[1];
_oldCoordY[1]=_coordY[1];
_oldCoordX[2]=_coordX[2];
_oldCoordY[2]=_coordY[2];
_oldCoordX[3]=_coordX[3];
_oldCoordY[3]=_coordY[3];
}

